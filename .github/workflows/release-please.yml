name: Release Please

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release-please:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - uses: googleapis/release-please-action@v4
      id: release_please
      with:
        release-type: go
        path: .
        token: ${{ secrets.GITHUB_TOKEN }}
        # Alternative: use PAT if available
        # token: ${{ secrets.PAT_TOKEN }}

    - name: Create GitHub Release
      if: steps.release_please.outputs.release_created == 'true'
      uses: actions/github-script@v7
      env:
        TAG_NAME: ${{ steps.release_please.outputs.tag_name }}
        RELEASE_NAME: ${{ steps.release_please.outputs.name }}
        RELEASE_BODY: ${{ steps.release_please.outputs.body }}
        RELEASE_DRAFT: ${{ steps.release_please.outputs.draft }}
        RELEASE_PRERELEASE: ${{ steps.release_please.outputs.prerelease }}
      with:
        script: |
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: process.env.TAG_NAME,
            name: process.env.RELEASE_NAME,
            body: process.env.RELEASE_BODY,
            draft: process.env.RELEASE_DRAFT === 'true',
            prerelease: process.env.RELEASE_PRERELEASE === 'true'
          });
          console.log('Created release: ' + release.html_url);

    # Debug info
    - name: Debug Release Info
      if: steps.release_please.outputs.release_created == 'true'
      run: |
        echo "Release created!"
        echo "Tag: ${{ steps.release_please.outputs.tag_name }}"
        echo "Name: ${{ steps.release_please.outputs.name }}"
        echo "Draft: ${{ steps.release_please.outputs.draft }}"
        echo "Prerelease: ${{ steps.release_please.outputs.prerelease }}"

    # Build and push Docker image
    - name: Set up Docker Buildx
      if: steps.release_please.outputs.release_created == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: steps.release_please.outputs.release_created == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      if: steps.release_please.outputs.release_created == 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ steps.release_please.outputs.tag_name }}
          type=semver,pattern={{major}}.{{minor}},value=${{ steps.release_please.outputs.tag_name }}

    - name: Build and push Docker image
      if: steps.release_please.outputs.release_created == 'true'
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max